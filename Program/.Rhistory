data_table_comma <- read.table("/home/drt83172/Documents/Automated_DNA_Concentration/Data/Test_data.csv", sep = ",", header = TRUE)
data_table_comma[1][2]
data_table_comma[1,2]
View(data_table_comma)
data_table_comma[1]
data_table_comma[1,2]
data_table_comma[1,3]
data_table_comma[1,3]
data_table_comma[1,1]
split(data_table_comma,cumsum(1:nrow(data_table_comma)%in%16))
split(data_table_comma,cumsum(1:nrow(data_table_comma)%in%17))
data <- split(data_table_comma,cumsum(1:nrow(data_table_comma)%in%17))
View(data)
data <- split(data_table_comma[row.names(data_table_comma) %in% 1:16])
data <- split(data_table_comma[row.names(data_table_comma) %in% 1:16,])
data <- data_table_comma[row.names(data_table_comma) %in% 1:16,]
View(data)
std_data <- data_table_comma[row.names(data_table_comma) %in% 1:16,]
sample_data <- data_table_comma[row.names(data_table_comma) %in% 16:nrow(data_table_comma),]
View(data_table_comma)
std_data[,3]
std_data[,3] * std_data[,4]
std_data$xy = std_data[,3]*td_data[,4]
std_data$xy = std_data[,3]*std_data[,4]
View(std_data)
sum(std_data$xy)
XY <- sum(std_data$xy)
# # finding X^2
std_data$x2 <- std_data[,4]^2
X2 <- sum(std_data$x2)
X <- sum(std_data[,4])
# # finding the sum of Y
Y <- sum(std_data[,3])
Y
# # finding m and b
n = nrow(stdData)
# # finding m and b
n = nrow(std_data)
m = ((n * XY) - (X * Y)) / ((n * X2) - X^2)
b = (Y-(m*X))/n
View(sample_data)
sample_data <- data_table_comma[row.names(data_table_comma) %in% 17:nrow(data_table_comma),]
sample_data[1,3]
for (i in 1:length(sample_data)){
sample_data[i,4] <- (sample_data[i,3]-b)/m
}
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- (sample_data[i,3]-b)/m
}
library(tidyverse)
ggplot() +
geom_point(data = std_data, aes(x = std_data[,4], y = std_data[,3]), color='black') +
geom_point(data = sample_data, aes(x = sample_data[,4], y = sample_data[,3]), color='blue')
ggplot() +
geom_point(data = std_data, aes(x = std_data[,4], y = std_data[,3]), color='black', size = 5) +
geom_point(data = sample_data, aes(x = sample_data[,4], y = sample_data[,3]), color='Green')
ggsave(file="Standard_Curve.png")
# # exporting data
write.csv(sample_data,"DNA_Concentrations.csv", row.names = FALSE)
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 3)
}
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 2)
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 2)
}
sample_data[,4]
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
dilution_factor <- 20
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 3)
}
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
data_table_comma <- read.table("/home/drt83172/Documents/Automated_DNA_Concentration/Data/Test_data.csv", sep = ",", header = TRUE)
dilution_factor <- 20
# # splitting data up
std_data <- data_table_comma[row.names(data_table_comma) %in% 1:16,]
sample_data <- data_table_comma[row.names(data_table_comma) %in% 17:nrow(data_table_comma),]
# # finding the sum of X*Y
std_data$xy <- std_data[,3]*std_data[,4]
XY <- sum(std_data$xy)
# # finding X^2
std_data$x2 <- std_data[,4]^2
X2 <- sum(std_data$x2)
# # finding the sum of X
X <- sum(std_data[,4])
# # finding the sum of Y
Y <- sum(std_data[,3])
# # finding m and b
n = nrow(std_data)
m = ((n * XY) - (X * Y)) / ((n * X2) - X^2)
b = (Y-(m*X))/n
# # using line of best fit equation to get ng of DNA
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 3)
}
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
# # exporting data
write.csv(sample_data,"DNA_Concentrations.csv", row.names = FALSE)
ggplot() +
geom_point(data = std_data, aes(x = std_data[,4], y = std_data[,3]), color='black', size = 5) +
geom_point(data = sample_data, aes(x = sample_data[,4], y = sample_data[,3]), color='Green')
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
data_table_comma <- read.table("/home/drt83172/Documents/Automated_DNA_Concentration/Data/Test_data.csv", sep = ",", header = TRUE)
# # splitting data up
std_data <- data_table_comma$Sample == std
View(data_table_comma)
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == 'std']
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == 'std',]
View(std_data)
sample_data <- data_table_comma[data_table_comma$Sample != 'std',]
# # finding the sum of X*Y
std_data$xy <- std_data[,3]*std_data[,4]
XY <- sum(std_data$xy)
# # finding X^2
std_data$x2 <- std_data[,4]^2
X2 <- sum(std_data$x2)
X <- sum(std_data[,4])
# # finding the sum of Y
Y <- sum(std_data[,3])
# # finding m and b
n = nrow(std_data)
m = ((n * XY) - (X * Y)) / ((n * X2) - X^2)
b = (Y-(m*X))/n
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 3)
}
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
dilution_factor <- 20
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
View(sample_data)
ggplot() +
geom_point(data = std_data, aes(x = std_data[,4], y = std_data[,3]), color='black', size = 5) +
geom_point(data = sample_data, aes(x = sample_data[,4], y = sample_data[,3]), color='Green')
#!/usr/bin/env Rscript
library(tidyverse)
library(ggplot2)
ggplot() +
geom_point(data = std_data, aes(x = std_data[,4], y = std_data[,3]), color='black', size = 5) +
geom_point(data = sample_data, aes(x = sample_data[,4], y = sample_data[,3]), color='Green')
library(tidyverse)
library(ggplot2)
data_table_comma <- read.table("/home/drt83172/Documents/Automated_DNA_Concentration/Data/Test_data.csv", sep = ",", header = TRUE)
dilution_factor <- 20
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'),]
library(stringr)
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'),]
library(stringr)
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'),]
ignore.case("PooPPPpppOOo")
sample_data <- data_table_comma[data_table_comma$Sample !='std', ignore_case = TRUE]
#!/usr/bin/env Rscript
library(tidyverse)
library(ggplot2)
library(stringr)
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'),]
install.packages("stringr")
install.packages("stringr")
install.packages("stringr")
library(stringr)
#!/usr/bin/env Rscript
library(tidyverse)
library(ggplot2)
library(stringr)
data_table_comma <- read.table("/home/drt83172/Documents/Automated_DNA_Concentration/Data/Test_data.csv", sep = ",", header = TRUE)
dilution_factor <- 20
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'),]
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
library(stringr)
#!/usr/bin/env Rscript
library(tidyverse)
library(ggplot2)
library(stringr)
data_table_comma <- read.table("/home/drt83172/Documents/Automated_DNA_Concentration/Data/Test_data.csv", sep = ",", header = TRUE)
dilution_factor <- 20
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'),]
library(stringr)
#!/usr/bin/env Rscript
library(tidyverse)
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'),]
ignore.case("PoooPPOPooPOpoPOPpoPoPOO")
dumb = DuMb
ignore.case(dumb)
ggplot() +
geom_point(data = std_data, aes(x = std_data[,4], y = std_data[,3]), color='black', size = 5) +
geom_point(data = sample_data, aes(x = sample_data[,4], y = sample_data[,3]), color='Green')
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == ignore.case('std'), ignore.case = TRUE]
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == stringr::ignore.case('std'), ]
library(stringr)
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == stringr::ignore.case('std'), ]
stringr
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == regex('std', ignore_case = TRUE), ]
sample_data <- data_table_comma[data_table_comma$Sample != regex('std', ignore_case = TRUE),]
data_table_comma <- read.table("/home/drt83172/Documents/Automated_DNA_Concentration/Data/Test_data.csv", sep = ",", header = TRUE)
dilution_factor <- 20
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == regex('std', ignore_case = TRUE), ]
sample_data <- data_table_comma[data_table_comma$Sample != regex('std', ignore_case = TRUE),]
dumb = DuMb
ignore.case(dumb)
# # finding the sum of X*Y
std_data$xy <- std_data[,3]*std_data[,4]
XY <- sum(std_data$xy)
# # finding X^2
std_data$x2 <- std_data[,4]^2
X2 <- sum(std_data$x2)
X <- sum(std_data[,4])
# # finding the sum of X*Y
std_data$xy <- std_data[,3]*std_data[,4]
XY <- sum(std_data$xy)
# # finding X^2
std_data$x2 <- std_data[,4]^2
X2 <- sum(std_data$x2)
X <- sum(std_data[,4])
# # finding the sum of Y
Y <- sum(std_data[,3])
# # finding m and b
n = nrow(std_data)
m = ((n * XY) - (X * Y)) / ((n * X2) - X^2)
b = (Y-(m*X))/n
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 3)
}
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
View(sample_data)
library(tidyverse)
library(ggplot2)
library(stringr)
data_table_comma <- read.table("/home/drt/Desktop/UGA/Automated_DNA_concentration-master/DNA_concentration_files/Samples_1041-1120.csv", sep = ",", header = TRUE)
dilution_factor <- 30
dilution_factor <- 20
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == regex('std', ignore_case = TRUE), ]
sample_data <- data_table_comma[data_table_comma$Sample != regex('std', ignore_case = TRUE),]
View(std_data)
data_table_comma <- read.table("/home/drt/Desktop/UGA/Automated_DNA_concentration-master/DNA_concentration_files/Samples_1041-1120.csv", sep = ",", header = TRUE)
dilution_factor <- 20
# # splitting data up
std_data <- data_table_comma[data_table_comma$Sample == regex('std', ignore_case = TRUE), ]
sample_data <- data_table_comma[data_table_comma$Sample != regex('std', ignore_case = TRUE),]
# # finding the sum of X*Y
std_data$xy <- std_data[,3]*std_data[,4]
XY <- sum(std_data$xy)
# # finding X^2
std_data$x2 <- std_data[,4]^2
X2 <- sum(std_data$x2)
X <- sum(std_data[,4])
# # finding the sum of Y
Y <- sum(std_data[,3])
# # finding m and b
n = nrow(std_data)
m = ((n * XY) - (X * Y)) / ((n * X2) - X^2)
b = (Y-(m*X))/n
for (i in 1:nrow(sample_data)){
sample_data[i,4] <- round((sample_data[i,3]-b)/m, digits = 3)
}
r <- round(cor(std_data$Concentration,std_data$Intensity), digits = 4)
View(std_data)
# plot(std_data$Concentration,std_data$Intensity)
# # Calculating true concentrations
sample_data$True_Concentration <- round(sample_data[,4]*dilution_factor, digits = 2)
# # exporting data
write.csv(sample_data,"DNA_Concentrations.csv", row.names = FALSE)
ggplot() +
geom_point(data = std_data, aes(x = std_data[,4], y = std_data[,3]), color='black', size = 5) +
geom_point(data = sample_data, aes(x = sample_data[,4], y = sample_data[,3]), color='Green') +
annotate(geom="text",x=2, y=5000, label= paste0("r value is of standards is ", r))
ggsave(file="Standard_Curve.png")
